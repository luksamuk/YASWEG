(define-module (yasweg generator))
(export open
        close
        on-page
        link-css
        on-head
        on-body
        h
        p
        on-div
        on-divclass
        img
        newline
        set-metadata
        on-navbar
        ulist
        on-container
        on-ribbon
        on-footer
        button
        inline-link
        on-row
        on-col)

(use-modules ((ice-9 format)))

;; ============== Global variables =========================

(define *stahtml-file* #f)


;; ============== Global utilities =========================

(define open
  (λ (file-name)
    (if *stahtml-file*
        (error "Static HTML file is already open!")
        (begin
          ;; Open HTML file
          (set! *stahtml-file* (open-file file-name "w"))
          ;; Write beginning of HTML file
          (display "<!DOCTYPE html>\n" *stahtml-file*)
          (display "<!-- This file was generated by YASWEG. -->\n" *stahtml-file*)
          (display "<html>\n" *stahtml-file*)))))

(define close
  (λ ()
    (if (not *stahtml-file*)
        (error "Static HTML file is not open!")
        (begin
          (display "</html>\n" *stahtml-file*)
          (close-port *stahtml-file*)
          (set! *stahtml-file* #f)))))


;; ================= Basic section macros ========================

(define-syntax on-page
  (syntax-rules ()
    ((on-page filename body ...)
     (if (not *stahtml-file*)
         (begin
           (open filename)
           body ...
           (close))
         (error "Static HTML file is already open!")))))

(define-syntax link-css
  (syntax-rules ()
    ((link-css sheet-ref)
     (if *stahtml-file*
         (begin
           (display
            (format #f "<link rel=\"stylesheet\" href=\"~a\">\n"
                    sheet-ref)
            *stahtml-file*))))))

(define-syntax on-head
  (syntax-rules ()
    ((on-head body ...)
     (if *stahtml-file*
         (begin
           ;; Start header
           (display "<head>\n" *stahtml-file*)
           ;; Include boostrap
           (if (file-exists? "bootstrap.css")
               (link-css "bootstrap.css")
               (warn "File \"bootstrap.css\" not found, ignoring bootstrap support"))
           ;; Push other arguments
           body ...
           ;; Close header
           (display "</head>\n" *stahtml-file*))
         (error "Static HTML file was not opened!")))))

(define-syntax on-body
  (syntax-rules ()
    ((on-body body ...)
     (if *stahtml-file*
         (begin
           ;; Follow the on-head model
           (display "<body>\n" *stahtml-file*)
           body ...
           (display "</head>\n" *stahtml-file*))
         (error "Static HTML file was not opened!")))))

;; ===================== Basic formatting macros ======================

(define-syntax h
  (syntax-rules ()
    ((h level text)
     (if *stahtml-file*
         (begin
           (display
            (format #f "<h~d>~a</h~d>\n"
                    level text level)
            *stahtml-file*))))))

(define-syntax p
  (syntax-rules ()
    ((p text)
     (p #f text))
    ((p class text)
     (if *stahtml-file*
         (begin
           (display
            (if class
                (format #f "<p class=\"~a\">~a</p>\n"
                        class text)
                (format #f "<p>~a</p>\n" text))
            *stahtml-file*))))))

(define-syntax on-div
  (syntax-rules ()
    ((on-div body ...)
     (if *stahtml-file*
         (begin
           (display "<div>\n" *stahtml-file*)
           body ...
           (display "</div>\n" *stahtml-file*))))))

(define-syntax on-divclass
  (syntax-rules ()
    ((on-divclass class body ...)
     (if *stahtml-file*
         (begin
           (display (format #f "<div class=\"~a\">\n"
                            class)
                    *stahtml-file*)
           body ...
           (display "</div>\n" *stahtml-file*))))))

(define-syntax img
  (syntax-rules ()
    ((img img-src)
     (if *stahtml-file*
         (display (format #f "<img src=\"~a\"/>\n"
                          img-src)
                  *stahtml-file*)))
    ((img class img-src)
     (if *stahtml-file*
         (display (format #f "<img class=\"~a\" src=\"~a\"/>"
                          class img-src)
                  *stahtml-file*)))))

(define-syntax newline
  (syntax-rules ()
    ((newline)
     (if *stahtml-file* (display "<br/>\n" *stahtml-file*)))))
         

;; ================== Basic inline formatting macros ==========

(define-syntax inline-link
  (syntax-rules ()
    ((inline-link link)
     (inline-link link link))
    ((inline-link link text)
     (if *stahtml-file*
         (format #f "<a href=\"~a\">~a</a>" link text)))
    ((inline-link link text target)
     (if *stahtml-file*
         (format #f "<a href=\"~a\" target=\"~a\">~a</a>"
                 link
                 (cond
                  ((eq? target 'blank) "_blank")
                  ((eq? target 'self) "_self")
                  ((eq? target 'parent) "_parent")
                  ((eq? target 'top) "_top")
                  (#t target))
                 text)))))

;; ================== Metadata macros =========================

(define set-metadata
  (λ (metadata-list)
    (if *stahtml-file*
        (map (λ (item)
               (if (list? item)
                   (cond
                    ;; Define charset
                    ((eq? (car item) 'charset)
                     (display (format #f "<meta charset=\"~a\">\n"
                                      (cadr item))
                              *stahtml-file*))
                    ;; Define author
                    ((eq? (car item) 'author)
                     (display (format #f "<meta name=\"author\" content=\"~a\">\n"
                                      (cadr item))
                              *stahtml-file*))
                    ;; Define description
                    ((eq? (car item) 'description)
                     (display (format #f "<meta name=\"description\" content=\"~a\">\n"
                                      (cadr item))
                              *stahtml-file*))
                    ;; Define title
                    ((eq? (car item) 'title)
                     (display (format #f "<title>~a</title>\n"
                                      (cadr item))
                              *stahtml-file*)))))
             metadata-list))))


;; ===================== Bootstrap support ====================

(define-syntax on-navbar
  (syntax-rules ()
    ((on-navbar body ...)
     (on-divclass
      "nav"
      body ...))))

(define-syntax ulist
  (syntax-rules ()
    ((list class list)
     (if *stahtml-file*
         (begin
           ;; Start list
           (display (format #f "<ul class=\"~a\">\n" class)
                    *stahtml-file*)
           ;; For each element in list, add said element.
           (map (λ (element)
                  ;; Begin list element
                  (display "<li>" *stahtml-file*)
                  (if (pair? element)
                      ;; If we're dealing with a pair, we can just
                      ;; toss it and its href
                      (display (format #f "<a href=\"~a\">~a</a>"
                                       (cdr element) (car element))
                               *stahtml-file*)
                      ;; Else we'll just toss nothing as href
                      (display (format #f "<a href=\"#\">~a</a>" element)
                               *stahtml-file*))
                  ;; End list element
                  (display "</li>\n" *stahtml-file*))
                list)
           ;; Close list
           (display "</ul>\n" *stahtml-file*))))))

(define-syntax on-container
  (syntax-rules ()
    ((on-container body ...)
     (on-divclass "container" body ...))))

(define-syntax on-ribbon
  (syntax-rules ()
    ((on-jumbotron body ...)
     (on-divclass
      "jumbotron"
      (on-container
       body ...)))))

(define-syntax on-footer
  (syntax-rules ()
    ((on-footer body ...)
     (on-divclass
      "panel-footer"
      (on-container
       body ...)))))

(define-syntax button
  (syntax-rules ()
    ((button type text)
     (button type "" "" text))
    ((button type ref text)
     (button type ref "" text))
    ((button type ref class text)
     (if *stahtml-file*
         (begin
           (display (format #f "<a href=\"~a\" type=\"button\" class=\"btn ~a\">~a</a>\n"
                            ;; 1. href
                            ref
                            ;; 2. class (and type)
                            (format #f "~a~a"
                                    (if (not (string=? class ""))
                                        (format #f "~a " class)
                                        "")
                                    (cond
                                     ((eq? type 'outline-primary) "btn-outline-primary")
                                     ((eq? type 'outline-secondary) "btn-outline-secondary")
                                     ((eq? type 'primary) "btn-primary")
                                     ((eq? type 'secondary) "btn-secondary")
                                     (#t "btn-primary")))
                            ;; 3. text
                            text)
                    *stahtml-file*))))))

(define-syntax on-row
  (syntax-rules ()
    ((on-row body ...)
     (if *stahtml-file*
         (on-divclass
          "row"
          body ...)))))

;;(on-col '((xs 12) (md 6)) )

(define-syntax on-col
  (syntax-rules ()
    ((on-col target-list body ...)
     (if (not (list? target-list))
         (error "Columns must be specified by a list of lists")
         (begin
           (let ((class-string ""))
             (map (λ (target)
                    (cond
                     ((not (list? target))
                      (error "Columns must be specified by a list of lists"))
                     ((or (not (number? (cadr target)))
                          (< (cadr target) 1)
                          (> (cadr target) 12))
                      (error "Column size must be a number between 1 and 12"))
                     (#t (set! class-string (string-append class-string
                                                           (format #f "col-~a-~a "
                                                                   (car target)
                                                                   (cadr target)))))))
                  target-list)
             (if *stahtml-file*
                 (on-divclass
                  class-string
                  body ...))))))))
     
